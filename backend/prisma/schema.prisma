// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(uuid())
  name                   String
  email                  String             @unique
  password               String
  phone                  String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  
  myListedproperties     Property[]         @relation("ListedProperties")
  favourites             Favourite[]
  
  enquiries              Enquiry[]          @relation("UserEnquiries")
  enquiryReplies         EnquiryReply[]     @relation("UserReplies")
  
  sentMessages           Message[]          @relation("SentMessages")
  receivedMessages       Message[]          @relation("ReceivedMessages")
  buyerConversations     Conversation[]     @relation("BuyerConversations")
  sellerConversations    Conversation[]     @relation("SellerConversations")
}




model Property {
  id            String          @id @default(uuid())
  title         String
  description   String
  price         Float
  ListingType   ListingType
  type          PropertyType
  bhk           Int
  sqft          Float
  furnished     Boolean
  available     Boolean         @default(true)
  city          City            @relation("CityProperties", fields: [cityId], references: [id])
  cityId        String
  state         String          
  country       String         
  address       String
  latitude      Float
  longitude     Float
  listedBy      User            @relation("ListedProperties", fields: [listedById], references: [id])
  listedById    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  images        PropertyImage[]
  enquiries     Enquiry[]       @relation("PropertyEnquiries")
  favourites    Favourite[]
  conversations Conversation[]  @relation("PropertyConversations")
}

model City {
  id            String          @id @default(uuid())
  name          String          @unique
  state         String
  country       String          @default("India")
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  properties    Property[]      @relation("CityProperties")
  
  @@index([name, state])
  @@index([isActive])
}
enum PropertyType {
  APARTMENT
  HOUSE
  PG
  COMMERCIAL
  VILLA
  PLOT
}

enum ListingType{
  RENT
  BUY
  COMMERCIAL
}

model PropertyImage {
  id          String   @id @default(uuid())
  url         String
  description String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
}

model Conversation {
  id          String    @id @default(uuid())
  property    Property  @relation("PropertyConversations", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String

  buyer       User      @relation("BuyerConversations", fields: [buyerId], references: [id])
  buyerId     String

  seller      User      @relation("SellerConversations", fields: [sellerId], references: [id])
  sellerId    String

  messages    Message[] @relation("ConversationMessages")



  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([propertyId, buyerId, sellerId], name: "unique_conversation_per_property")
  @@index([buyerId])
  @@index([sellerId])
}



model Message {
  id             String       @id @default(uuid())
  content        String
  messageType    MessageType  @default(TEXT)
  
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  
  
  
  createdAt      DateTime     @default(now())
  

  
  @@index([conversationId, createdAt])
  @@index([senderId, receiverId])
}

enum MessageType {
  TEXT
}

model Enquiry {
  id          String   @id @default(uuid())
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation("UserEnquiries", fields: [userId], references: [id])
  userId      String
  
  property    Property @relation("PropertyEnquiries", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  
  replies     EnquiryReply[] @relation("EnquiryReplies")
  
  @@index([propertyId, createdAt])
  @@index([userId, createdAt])
}

model EnquiryReply {
  id          String   @id @default(uuid())
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation("UserReplies", fields: [userId], references: [id])
  userId      String
  
  enquiry     Enquiry  @relation("EnquiryReplies", fields: [enquiryId], references: [id], onDelete: Cascade)
  enquiryId   String
  
  @@index([enquiryId, createdAt])
  @@index([userId, createdAt])
}


model Favourite {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  createdAt   DateTime @default(now())

  @@unique([userId, propertyId]) 
}